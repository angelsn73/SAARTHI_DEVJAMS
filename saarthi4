from collections import deque
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.box import HEAVY_EDGE

console = Console()

# ------------------------------
# Generate Floors (5 floors, 25 rooms each, with corridors)
# ------------------------------
FLOORS = {}
ROWS, COLS = 7, 7   # enough space for 25 rooms + corridors

for f in range(1, 6):  # Floors 1–5
    grid = [[" " for _ in range(COLS)] for _ in range(ROWS)]  # Use space for corridors

    # Add walls around
    for r in range(ROWS):
        for c in range(COLS):
            if r in [0, ROWS-1] or c in [0, COLS-1]:
                grid[r][c] = "X"

    # Entrance at Ground Floor
    if f == 1:
        grid[ROWS-1][COLS//2] = "E"
    else:
        grid[ROWS-1][COLS//2] = "S"  # Stairs

    # Place 25 rooms inside a 5x5 block
    room_no = 1
    for r in range(1, 6):
        for c in range(1, 6):
            grid[r][c] = f"R{f}{room_no:02d}"
            room_no += 1

    FLOORS[f] = grid

# ------------------------------
# Helper functions
# ------------------------------
def find_position(floor, value):
    grid = FLOORS[floor]
    for r in range(ROWS):
        for c in range(COLS):
            if grid[r][c] == value:
                return (r, c)
    return None

def bfs(floor, start, goal):
    grid = FLOORS[floor]
    queue = deque([start])
    visited = {start: None}

    while queue:
        r, c = queue.popleft()
        if (r, c) == goal:
            break
        for dr, dc in [(1,0),(-1,0),(0,1),(0,-1)]:
            nr, nc = r+dr, c+dc
            if 0 <= nr < ROWS and 0 <= nc < COLS:
                if grid[nr][nc] != "X" and (nr,nc) not in visited:
                    queue.append((nr,nc))
                    visited[(nr,nc)] = (r,c)

    if goal not in visited:
        return None

    path = []
    node = goal
    while node:
        path.append(node)
        node = visited[node]
    path.reverse()
    return path

def display_map(floor, path=None, start=None, goal=None):
    grid = FLOORS[floor]
    table = Table(show_header=False, box=HEAVY_EDGE, expand=False)
    for _ in range(COLS):
        table.add_column(justify="center", style="bold")

    for r in range(ROWS):
        row = []
        for c in range(COLS):
            cell = grid[r][c]
            if path and (r,c) in path and (r,c) != start and (r,c) != goal:
                row.append("[blue]*[/blue]")
            elif (r,c) == start:
                row.append("[green]E(S)[/green]")
            elif (r,c) == goal:
                row.append(f"[red]{cell}(D)[/red]")
            elif cell.startswith("R"):
                row.append(f"[cyan]{cell}[/cyan]")
            elif cell == " ":
                row.append("[white] [/white]")  # True corridor space
            elif cell == "S":
                row.append("[green]S[/green]")   # stairs
            elif cell == "E":
                row.append("[green]E[/green]")   # entrance
            else:
                row.append("[grey37]X[/grey37]")  # walls
        table.add_row(*row)

    console.print(table)

# ------------------------------
# Main program
# ------------------------------
def main():
    console.print(Panel.fit("📋 [bold yellow]Multi-Floor Indoor Navigation[/bold yellow]"))

    # Ask for floor
    floor = int(console.input("\n🏷️  Enter destination floor (1–5): ").strip())
    if floor not in FLOORS:
        console.print("[red]❌ Invalid floor number.[/red]")
        return

    # Ask for room
    destination = console.input(f"🏷️  Enter destination room (e.g., R{floor}01 – R{floor}25): ").strip().upper()

    start = find_position(1, "E") if floor == 1 else find_position(floor, "S")
    goal = find_position(floor, destination)

    if not goal:
        console.print("[red]❌ Invalid room number.[/red]")
        return

    path = bfs(floor, start, goal)
    if not path:
        console.print("[red]⚠️ No path found![/red]")
        return

    console.print(f"\n[bold]Floor {floor} Layout[/bold]:")
    display_map(floor, path, start, goal)
    console.print(f"\n✅ Shortest path found! Steps: [bold green]{len(path)-1}[/bold green]")

if __name__ == "__main__":
    main()
